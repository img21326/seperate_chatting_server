// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/pubsub/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pubmessage "github.com/img21326/fb_chat/structure/pub_message"
)

// MockSubMessageUsecaseInterface is a mock of SubMessageUsecaseInterface interface.
type MockSubMessageUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubMessageUsecaseInterfaceMockRecorder
}

// MockSubMessageUsecaseInterfaceMockRecorder is the mock recorder for MockSubMessageUsecaseInterface.
type MockSubMessageUsecaseInterfaceMockRecorder struct {
	mock *MockSubMessageUsecaseInterface
}

// NewMockSubMessageUsecaseInterface creates a new mock instance.
func NewMockSubMessageUsecaseInterface(ctrl *gomock.Controller) *MockSubMessageUsecaseInterface {
	mock := &MockSubMessageUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockSubMessageUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubMessageUsecaseInterface) EXPECT() *MockSubMessageUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockSubMessageUsecaseInterface) Publish(ctx context.Context, topic string, Message *pubmessage.PublishMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", ctx, topic, Message)
}

// Publish indicates an expected call of Publish.
func (mr *MockSubMessageUsecaseInterfaceMockRecorder) Publish(ctx, topic, Message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSubMessageUsecaseInterface)(nil).Publish), ctx, topic, Message)
}

// Subscribe mocks base method.
func (m *MockSubMessageUsecaseInterface) Subscribe(ctx context.Context, topic string) func() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic)
	ret0, _ := ret[0].(func() ([]byte, error))
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubMessageUsecaseInterfaceMockRecorder) Subscribe(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubMessageUsecaseInterface)(nil).Subscribe), ctx, topic)
}
